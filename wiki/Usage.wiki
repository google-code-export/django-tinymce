#summary Using `tinymce`.

= Usage =

The application can enable TinyMCE for one form field using the `widget` keyword argument of `Field` constructors or for all textareas on a page using a view.

== Using the widget ==
The TinyMCE widget can be enabled by setting it as the widget for a formfield. For example, to use a nice big TinyMCE widget for the content field of a flatpage you could use the following code:

{{{
class FlatpageForm(ModelForm):
    content = forms.CharField(widget=TinyMCE(
        content_language=CONTENT_LOCALE,
        attrs={'cols': 80, 'rows': 30},
    ))

    class Meta:
        model = Flatpage
}}}

The widget accepts the following keyword argument:

*`content_language`*
  The language of the widget content. Will be used to set the `language`, `directionality` and `spellchecker_languages` configuration options of the TinyMCE editor.

== Using the view ==

If you cannot or will not change the widget on a form you can also use the `tinymce-js` named view to convert some or all textfields on a page to TinyMCE editors. On the template of the page, add the following lines to the `HEAD` element:
{{{
<script type="text/javascript" src="{{ MEDIA_URL }}js/tiny_mce/tiny_mce.js"></script>
<script type="text/javascript" src="{% url tinymce-js "NAME" %}"></script>
}}}

The `NAME` allows you to create multiple TinyMCE configurations. Now create a template containing the Javascript initialization code. It should be placed in the template path as `NAME/tinymce_textareas.js` or `tinymce/NAME_textareas.js`.

Example:

{{{
tinyMCE.init({
    mode: "textareas",
    theme: "advanced",
    plugins: "spellchecker,directionality,paste,searchreplace",
    language: "{{ language }}",
    directionality: "{{ directionality }}",
    spellchecker_languages : "{{ spellchecker_languages }}",
    spellchecker_rpc_url : "{{ spellchecker_rpc_url }}"
});
}}}

This example also shows all variables you can use in the template.